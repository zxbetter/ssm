<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration   PUBLIC
        "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://www.mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>

    <!-- mybatis-generator 3） -->

    <!-- 引入配置文件 -->
    <properties resource="generator.properties"/>

    <!-- 指定数据库驱动 jar 的位置 -->
    <classPathEntry location="${jdbc.driverPath}"/>

    <context id="ssm_demo">

        <commentGenerator>
            <!-- 取消注释 -->
            <property name="suppressAllComments" value="true"/>

            <!-- 取消注释时间戳 -->
            <property name="suppressDate" value="true"/>
        </commentGenerator>

        <!-- jdbc 连接配置 -->
        <jdbcConnection driverClass="${jdbc.driverClass}" connectionURL="${jdbc.url}"
                        userId="${jdbc.username}" password="${jdbc.password}"/>

        <!-- 类型转换,非必须，在数据库类型和 java 类型之间的转换控制 -->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <!-- 生成 model 类的配置
        targetPackage: 指定 model 类的包名
        targetProject: 指定在该项目下的路径
         -->
        <javaModelGenerator targetPackage="devin.demo.model" targetProject="src/main/java">
            <!-- 是否允许子包，即 targetPackage.schemaName.tableName -->
            <property name="enableSubPackages" value="false"/>

            <!--
             1. default false
             2. true 将会创建一个包含该类所有字段的构造方法,
             并且 BaseResultMap 将会使用构造方法而不是 setter 为每个字段设值.
             -->
            <property name="constructorBased" value="false"/>

            <!-- 是否对 String 类型的数据进行 trim 操作 -->
            <property name="trimStrings" value="true"/>

            <!-- 生成的 model 类是否不可变，即是否不生成 setter 方法 -->
            <property name="immutable" value="false"/>
        </javaModelGenerator>

        <!-- 生成 .xml 文件的配置 -->
        <sqlMapGenerator targetPackage="mapper" targetProject="src/main/resources">
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>

        <!-- 生成 DAO 接口的配置
        type="ANNOTATEDMAPPER",生成Java Model 和基于注解的Mapper对象
        type="MIXEDMAPPER",生成基于注解的Java Model 和相应的Mapper对象
        type="XMLMAPPER",生成SQLMap XML文件和独立的Mapper接口-->
        <javaClientGenerator type="XMLMAPPER" targetPackage="devin.demo.mapper" targetProject="src/main/java">
            <property name="enableSubPackages" value="false"/>
        </javaClientGenerator>

        <!-- enable*Example 是否生成 example 类 -->
        <table tableName="T_DEMO" domainObjectName="Demo"
               enableCountByExample="false" enableSelectByExample="false"
               enableDeleteByExample="false" enableUpdateByExample="false">

            <!--
             指定主键生成的策略
             http://www.mybatis.org/generator/configreference/generatedKey.html
             1. column: 指定生成列的列名
             2. sqlStatement: 如果该列是 identity 列, 则可以使用预定于的值, 如 MySql, DB2, Cloudscape,
             DB2_MF, Derby, HSQLDB, Informix, SqlServer, SYBASE, JDBC.
             3. 对于 identity 列, 设置 type=post, identity=true; 对于 sequence 列, 设置 type=pre, identity=false.
             -->
            <generatedKey column="ID" sqlStatement="Mysql" identity="true" type="post" />
            <!--<generatedKey column="ID" sqlStatement="select SEQ_ID.nextval from dual" identity="false" type="pre" />-->


            <!-- 忽略的字段 -->
            <!--<ignoreColumn column="ADDRESS"/>-->

            <!-- 指定列的 java 类型 -->
            <!--<columnOverride column="" jdbcType=""/>-->

            <!-- 对列进行重命名 -->
            <!--<columnRenamingRule searchString="^T_" replaceString="" />-->
        </table>
    </context>

    <!-- mybatis-generator 4） -->
    <!-- Edit Configurations... ==> + ==> Maven ==> Name:xxx, Command Line: mybatis-generator:generate -e -->

    <!--
     注意事项:
     1. 表中没有主键的时候只能生成 insert 语句.
     -->
</generatorConfiguration>