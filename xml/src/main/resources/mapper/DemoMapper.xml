<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="devin.demo.mapper.DemoMapper">
  <resultMap id="BaseResultMap" type="devin.demo.model.Demo">
    <id column="ID" jdbcType="BIGINT" property="id" />
    <result column="LOGIN_NAME" jdbcType="VARCHAR" property="loginName" />
    <result column="LOGIN_PWD" jdbcType="VARCHAR" property="loginPwd" />
    <result column="NICK_NAME" jdbcType="VARCHAR" property="nickName" />
    <result column="REAL_NAME" jdbcType="VARCHAR" property="realName" />
    <result column="GENDER" jdbcType="VARCHAR" property="gender" />
    <result column="PHONE" jdbcType="CHAR" property="phone" />
    <result column="ADDRESS" jdbcType="VARCHAR" property="address" />
  </resultMap>
  <sql id="Base_Column_List">
    ID, LOGIN_NAME, LOGIN_PWD, NICK_NAME, REAL_NAME, GENDER, PHONE, ADDRESS
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from t_demo
    where ID = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from t_demo
    where ID = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="devin.demo.model.Demo">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into t_demo (LOGIN_NAME, LOGIN_PWD, NICK_NAME, 
      REAL_NAME, GENDER, PHONE, 
      ADDRESS)
    values (#{loginName,jdbcType=VARCHAR}, #{loginPwd,jdbcType=VARCHAR}, #{nickName,jdbcType=VARCHAR}, 
      #{realName,jdbcType=VARCHAR}, #{gender,jdbcType=VARCHAR}, #{phone,jdbcType=CHAR}, 
      #{address,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="devin.demo.model.Demo">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into t_demo
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="loginName != null">
        LOGIN_NAME,
      </if>
      <if test="loginPwd != null">
        LOGIN_PWD,
      </if>
      <if test="nickName != null">
        NICK_NAME,
      </if>
      <if test="realName != null">
        REAL_NAME,
      </if>
      <if test="gender != null">
        GENDER,
      </if>
      <if test="phone != null">
        PHONE,
      </if>
      <if test="address != null">
        ADDRESS,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="loginName != null">
        #{loginName,jdbcType=VARCHAR},
      </if>
      <if test="loginPwd != null">
        #{loginPwd,jdbcType=VARCHAR},
      </if>
      <if test="nickName != null">
        #{nickName,jdbcType=VARCHAR},
      </if>
      <if test="realName != null">
        #{realName,jdbcType=VARCHAR},
      </if>
      <if test="gender != null">
        #{gender,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        #{phone,jdbcType=CHAR},
      </if>
      <if test="address != null">
        #{address,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="devin.demo.model.Demo">
    update t_demo
    <set>
      <if test="loginName != null">
        LOGIN_NAME = #{loginName,jdbcType=VARCHAR},
      </if>
      <if test="loginPwd != null">
        LOGIN_PWD = #{loginPwd,jdbcType=VARCHAR},
      </if>
      <if test="nickName != null">
        NICK_NAME = #{nickName,jdbcType=VARCHAR},
      </if>
      <if test="realName != null">
        REAL_NAME = #{realName,jdbcType=VARCHAR},
      </if>
      <if test="gender != null">
        GENDER = #{gender,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        PHONE = #{phone,jdbcType=CHAR},
      </if>
      <if test="address != null">
        ADDRESS = #{address,jdbcType=VARCHAR},
      </if>
    </set>
    where ID = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="devin.demo.model.Demo">
    update t_demo
    set LOGIN_NAME = #{loginName,jdbcType=VARCHAR},
      LOGIN_PWD = #{loginPwd,jdbcType=VARCHAR},
      NICK_NAME = #{nickName,jdbcType=VARCHAR},
      REAL_NAME = #{realName,jdbcType=VARCHAR},
      GENDER = #{gender,jdbcType=VARCHAR},
      PHONE = #{phone,jdbcType=CHAR},
      ADDRESS = #{address,jdbcType=VARCHAR}
    where ID = #{id,jdbcType=BIGINT}
  </update>
</mapper>